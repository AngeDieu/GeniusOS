#include "arrow_view.h"

namespace HardwareTest {

const uint8_t arrowUpMask[10][9] = {
    {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF},
    {0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF},
    {0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},
    {0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
};

const uint8_t arrowDownMask[10][9] = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},
    {0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},
    {0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF},
    {0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF},
};

ArrowView::ArrowView()
    : m_direction(OMG::Direction::Up()), m_color(KDColorBlack) {}

void ArrowView::drawRect(KDContext *ctx, KDRect rect) const {
  KDColor arrowWorkingBuffer[10 * 9];
  ctx->fillRect(bounds(), KDColorWhite);
  KDCoordinate startLine = m_direction.isUp() ? k_arrowHeight : 0;
  KDCoordinate startArrow =
      m_direction.isUp() ? 0 : bounds().height() - k_arrowHeight;
  ctx->fillRect(KDRect((Ion::Display::Width - k_arrowThickness) / 2, startLine,
                       k_arrowThickness, bounds().height() - k_arrowHeight),
                m_color);
  KDRect frame((Ion::Display::Width - k_arrowWidth) / 2, startArrow,
               k_arrowWidth, k_arrowHeight);
  const uint8_t *mask = m_direction.isUp() ? (const uint8_t *)arrowUpMask
                                           : (const uint8_t *)arrowDownMask;
  ctx->blendRectWithMask(frame, m_color, mask, arrowWorkingBuffer);
}

}  // namespace HardwareTest
